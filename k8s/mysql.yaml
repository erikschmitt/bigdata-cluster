#Begin: Configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-deployment-init-configmap
data:
  mysql-init.sql: |
    CREATE TABLE `sentence` (
      `id` SMALLINT unsigned  NOT NULL,
      `person` VARCHAR(50) NOT NULL,
      `season`  tinyint NOT NULL,
      `episode`  tinyint NOT NULL,
      `sentence`  VARCHAR(5000),
      `sentiment`  float,
      PRIMARY KEY (`id`)
    );

    CREATE TABLE `sentiment_counts` (
      `person` VARCHAR(50) NOT NULL,
      `season`  tinyint NOT NULL,
      `sentiment_group_n2`  BIGINT,
      `sentiment_group_n1`  BIGINT,
      `sentiment_group_p1`  BIGINT,
      `sentiment_group_p2`  BIGINT,
       PRIMARY KEY (`person`,`season`)
    );

    DELIMITER //
      CREATE PROCEDURE add_count_all(
        IN per VARCHAR(50), 
        IN seas tinyint, 
        IN sen_gp_n2 BIGINT,
        IN sen_gp_n1 BIGINT,
        IN sen_gp_p1 BIGINT,
        IN sen_gp_p2 BIGINT)
      BEGIN
        INSERT INTO sentiment_counts (
          person,
          season,
          sentiment_group_n2,
          sentiment_group_n1,
          sentiment_group_p1,
          sentiment_group_p2)
        VALUES (per,seas,sen_gp_n2,sen_gp_n1,sen_gp_p1,sen_gp_p2)
        ON DUPLICATE KEY UPDATE
          sentiment_group_n2 = sen_gp_n2,
          sentiment_group_n1 = sen_gp_n1,
          sentiment_group_p1 = sen_gp_p1,
          sentiment_group_p2 = sen_gp_p2;
      END //
    DELIMITER ;

    DELIMITER //
      CREATE PROCEDURE add_count(
        IN per VARCHAR(50), 
        IN seas tinyint,
        IN sent_gr VARCHAR(50))
      BEGIN

        SET @iPer = per;
        SET @seas = seas;
        SET @sent = sent_gr;
        SET @query = CONCAT('INSERT INTO sentiment_counts (
              person,season,',@sent,')
        VALUES ("',@iPer,'","',@seas,'",1 )
        ON DUPLICATE KEY UPDATE
          ',@sent,' = if(',@sent,' IS NULL,1,',@sent,'+1)');

        PREPARE QUERY FROM @query;
        EXECUTE QUERY;

      END //
    DELIMITER ;

    CREATE VIEW allSeasons AS SELECT DISTINCT season FROM sentence;
    CREATE VIEW allPeople AS SELECT DISTINCT person FROM sentence;
    CREATE VIEW allPeopleChart AS SELECT person, COALESCE(SUM(sentiment_group_n2), 0) AS n2, COALESCE(SUM(sentiment_group_n1), 0) AS n1, COALESCE(SUM(sentiment_group_p1), 0) AS p1, COALESCE(SUM(sentiment_group_p2), 0) AS p2 FROM sentiment_counts GROUP BY person;
    CREATE VIEW allSeasonsChart AS SELECT season, COALESCE(SUM(sentiment_group_n2), 0) AS n2, COALESCE(SUM(sentiment_group_n1), 0) AS n1, COALESCE(SUM(sentiment_group_p1), 0) AS p1, COALESCE(SUM(sentiment_group_p2), 0) AS p2 FROM sentiment_counts GROUP BY season;

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  labels:
    app: my-mysql-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-mysql
  template:
    metadata:
      labels:
        app: my-mysql
    spec:
      containers:
        - name: my-mysql
          image: mysql
          # Set required environment variables to initialize the container
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "mysecretpw"
            - name: MYSQL_DATABASE
              value: "sentence"
          ports:
            - containerPort: 33060
          # Mount the volume
          # Mount configmap at expected location (excerpt)
          volumeMounts:
            - name: init-volume
              mountPath: /docker-entrypoint-initdb.d/
      volumes:
        - name: init-volume
          configMap:
            name: mysql-deployment-init-configmap

---
#Begin: Service
apiVersion: v1
kind: Service
metadata:
  name: my-app-mysql-service
spec:
  selector:
    app: my-mysql
  ports:
    - name: mysql-xproto
      protocol: TCP
      port: 33060
      targetPort: 33060
#End: Service
